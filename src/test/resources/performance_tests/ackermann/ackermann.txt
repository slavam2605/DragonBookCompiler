fun ackermann(int m, int n) -> int {
    if (m == 0) {
        return n + 1;
    }
    if (n == 0) {
        return ackermann(m - 1, 1);
    }
    return ackermann(m - 1, ackermann(m, n - 1));
}

fun compute_ackermann_sum(int max_m, int max_n) -> int {
    int sum = 0;
    for (int m = 0; m <= max_m; m += 1) {
        for (int n = 0; n <= max_n; n += 1) {
            sum += ackermann(m, n);
        }
    }
    return sum;
}

fun performance_target(int n) -> int {
    // n is 10000, use it to derive test parameters
    // Ackermann grows extremely fast, so we keep values small
    int max_m = n / 10000 * 3; // = 3
    int max_n = n / 1250;      // = 8
    return compute_ackermann_sum(max_m, max_n);
}

fun test_main() {
    // Test basic Ackermann values
    assertEquals(ackermann(0, 0), 1);
    assertEquals(ackermann(0, 5), 6);
    assertEquals(ackermann(1, 0), 2);
    assertEquals(ackermann(1, 1), 3);
    assertEquals(ackermann(1, 5), 7);
    assertEquals(ackermann(2, 0), 3);
    assertEquals(ackermann(2, 2), 7);
    assertEquals(ackermann(2, 5), 13);
    assertEquals(ackermann(3, 0), 5);
    assertEquals(ackermann(3, 3), 61);
    assertEquals(ackermann(3, 4), 125);

    // Test the sum computation
    int sum = compute_ackermann_sum(3, 8);
    assertEquals(sum, 4259);
}
