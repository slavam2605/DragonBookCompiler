fun abs_float(float x) -> float {
    if (x < 0.0) {
        return -x;
    }
    return x;
}

fun sqrt_newton(float x) -> float {
    if (x <= 0.0) {
        return 0.0;
    }

    float guess = x / 2.0;
    float epsilon = 0.000001;

    for (int i = 0; i < 20; i += 1) {
        float next_guess = (guess + x / guess) / 2.0;
        float diff = abs_float(next_guess - guess);
        if (diff < epsilon) {
            return next_guess;
        }
        guess = next_guess;
    }

    return guess;
}

fun compute_sqrt_sum(int n) -> float {
    float sum = 0.0;
    for (int i = 1; i <= n; i += 1) {
        float val = i as float;
        sum += sqrt_newton(val);
    }
    return sum;
}

fun performance_target(int n) -> int {
    return compute_sqrt_sum(n) as int;
}

fun test_main() {
    float sqrt2 = sqrt_newton(2.0);
    assertEquals(sqrt2 > 1.414 && sqrt2 < 1.415, true);

    float sqrt9 = sqrt_newton(9.0);
    assertEquals(sqrt9 > 2.999 && sqrt9 < 3.001, true);

    float sqrt16 = sqrt_newton(16.0);
    assertEquals(sqrt16 > 3.999 && sqrt16 < 4.001, true);

    float sum = compute_sqrt_sum(100);
    assertEquals(sum > 671.0 && sum < 672.0, true);
}

// external_calls: 4