fun f(float x) -> float {
    return x * x - x + 3.0;
}

fun integrate(float a, float b, int n) -> float {
    float result = 0.0;
    float dx = (b - a) / n;
    for (int i = 0; i < n; i = i + 1) {
        float x = a + i * (b - a) / n;
        result = result + f(x + dx / 2) * dx;
    }
    return result;
}

fun antiderivative(float x) -> float {
    return x * x * x / 3.0 - x * x / 2.0 + 3.0 * x;
}

fun expected_error(float a, float b, float dx) -> float {
    float dd_f = 2.0; // second derivative of f
    return (b - a) / 24.0 * dd_f * dx * dx;
}

fun exact_int(float a, float b) -> float {
    return antiderivative(b) - antiderivative(a);
}

fun abs(float x) -> float {
    if (x < 0.0) return -x;
    return x;
}

fun assertAlmostEquals(float actual, float expected, float error) {
    assertEquals(abs(actual - expected) <= error, true);
}

fun testCase(float a, float b) {
    int n = 100;
    float result = integrate(a, b, n);
    float expected = exact_int(a, b);
    float ex_error = expected_error(a, b, (b - a) / n);

    print_float(result)
    print_float(expected)
    print_float(expected - result)
    print_float(ex_error)
    println()

    assertAlmostEquals(result, expected, ex_error * 1.1);
}

fun test_main() {
    testCase(0.0, 1.0);
    testCase(-10.0, 10.0);
    testCase(21.0, 212.0);
    testCase(-100.0, 100.0);
    testCase(400.0, 1000.0);
}

// external_calls: 30